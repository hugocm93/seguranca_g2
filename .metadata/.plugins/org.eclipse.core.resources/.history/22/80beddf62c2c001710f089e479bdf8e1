package model;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Scanner;

public class UserDAOMockImplementation implements UserDAO{
	
	ArrayList<User> _users = new ArrayList<User>();
	
	public UserDAOMockImplementation(){
		User user1 = new User();
		user1.set_group(Group.Administrador);
		user1.set_loginName("admin@inf1416.puc-rio.br");
		user1.set_allowAccessAfter(new Timestamp(System.currentTimeMillis()));
		
		String salt = (String)user1.get_loginName().substring(0, 9);
		user1.set_salt(salt);
		
		String mockPassword = "162534";
		user1.set_passwordHash(calcStringHash(mockPassword + salt));
				
		Scanner scanner = null;
		try {
			scanner = new Scanner( new File("/Users/hugocm93/Google_Drive/PUC-Rio/2017.1/INF1416/seguranca_g2/t3/Pacote-T3/Keys/admin-x509.crt") );
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		String text = scanner.useDelimiter("\\A").next();
		scanner.close(); // Put this call in a finally block
		
		try {
			X509Certificate certificate = test2(text);
			System.out.println(certificate.toString());
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (CertificateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		_users.add(user1);	
	}
	
	private byte[] calcStringHash(String string){
		MessageDigest digest;
		try {
			digest = MessageDigest.getInstance("SHA-1");
			digest.update(string.getBytes());
			return digest.digest();
		}
		catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			return null;
		}
	}
	
	public static X509Certificate test(String path) throws FileNotFoundException, CertificateException{
		FileInputStream fis = new FileInputStream(path);
		BufferedInputStream bis = new BufferedInputStream(fis);
		
		X509Certificate certificate = (X509Certificate)CertificateFactory.getInstance("X.509").generateCertificate(bis);
		return certificate;
	}
	
	public static X509Certificate test2(String string) throws CertificateException{
		ByteArrayInputStream bais = new ByteArrayInputStream(string.getBytes());
		X509Certificate certificate = (X509Certificate)CertificateFactory.getInstance("X.509").generateCertificate(bais);
		
		return certificate;
	}
	
    public static X509Certificate convertToX509Cert(String certificateString) throws CertificateException {
        X509Certificate certificate = null;
        CertificateFactory cf = null;
        try {
            if (certificateString != null && !certificateString.trim().isEmpty()) {
            	
            	int pos = certificateString.indexOf("-----BEGIN CERTIFICATE-----\n");
            	certificateString = certificateString.substring(pos);
                certificateString = certificateString.replace("-----BEGIN CERTIFICATE-----\n", "")
                        .replace("-----END CERTIFICATE-----", "");
                
                byte[] certificateData = Base64.getDecoder().decode(certificateString);
                cf = CertificateFactory.getInstance("X509");
                certificate = (X509Certificate) cf.generateCertificate(new ByteArrayInputStream(certificateData));
            }
        } catch (CertificateException e) {
            throw new CertificateException(e);
        }
        return certificate;
    }

	@Override
	public boolean addUser(User user) {
		return _users.add(user);
	}

	@Override
	public ArrayList<User> getAllUsers() {
		return _users;
	}

	@Override
	public boolean updateUser(User user){
		for(User u : _users){
			if(user.get_loginName().equals(u.get_loginName())){
				u = user;
				return true;
			}
		}
		return false;
	}

	@Override
	public boolean deleteUser(User user) {
		for(User u : _users){
			if(user.get_loginName().equals(u.get_loginName())){
				_users.remove(user);
				return true;
			}
		}
		return false;
	}

	@Override
	public User getUserByLoginName(String loginName) {
		for(User u : _users){
			if(loginName.equals(u.get_loginName())){
				return u;
			}
		}
		return null;
	}
}
