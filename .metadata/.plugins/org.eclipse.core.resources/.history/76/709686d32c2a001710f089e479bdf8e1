package presenter;

import java.sql.Timestamp;
import java.util.ArrayList;

import model.Pair;
import model.User;
import model.UserDAOMockImplementation;
import model.UserSession;
import view.LoginWindow;

public class LoginPresenter implements LoginPresenterListener{
	
	private LoginWindow _loginWindow;
	private UserDAOMockImplementation _userDAO;
	private UserSession _session;
	
	
	public LoginPresenter() {
		super();

		_loginWindow = new LoginWindow(this);
		_userDAO = new UserDAOMockImplementation();
	}
	
	public void showWindow(){
		_loginWindow.show();
	}

	@Override
	public void loginButtonPressed() {
		String loginName = _loginWindow._loginNameTextField.getText();
		User user = _userDAO.getUserByLoginName(loginName);
		
		if(user != null){
			Timestamp currentTime = new Timestamp(System.currentTimeMillis());
			if(currentTime.after(user.get_allowAccessAfter())){
				_session = new UserSession(user);
				randomButtons();
				_loginWindow.loginNameSucceded();
			}
			else{
				double timeDifference = user.get_allowAccessAfter().getTime() - 
									    currentTime.getTime();
				timeDifference /= 1000; // em segundos
				String message = "Acesso bloqueado. Tente novamente em " + 
								 String.format("%.2f", timeDifference) + " segundos";
				
				_loginWindow._firstWarningLabel.setVisible(true);
				_loginWindow._firstWarningLabel.setText(message);
			}
			
		}
		else{
			_loginWindow._firstWarningLabel.setVisible(true);
			_loginWindow._firstWarningLabel.setText("Identificação inválida");
		}
	}

	private void randomButtons(){
		ArrayList<String> numbers = new ArrayList<String>();
		numbers.add("0"); numbers.add("1"); numbers.add("2");
		numbers.add("3"); numbers.add("4"); numbers.add("5");
		numbers.add("6"); numbers.add("7"); numbers.add("8");
		numbers.add("9");
		
		ArrayList<Pair<String, String>> buttons = 
							new ArrayList<Pair<String, String>>();
		
		for(int i = 0; i < 5; i++){
			int randomNum1 = (int)(Math.random() * numbers.size()); 
			int randomNum2 = randomNum1;
			while(randomNum1 == randomNum2){
				randomNum2 = (int)(Math.random() * numbers.size());
			}
			Pair<String, String> newPair = new Pair<String, String>();
			newPair.first = numbers.get(randomNum1);
			newPair.second = numbers.get(randomNum2);
			
			numbers.remove(newPair.first);
			numbers.remove(newPair.second);
			buttons.add(newPair);
		}
		
		_loginWindow.populatePasswordButtons(buttons);
	}

	@Override
	public void passwordButtonPressed(String buttonName){
		String[] parts = buttonName.split("-");
		Pair<String, String> newPair = new Pair<String, String>();
		newPair.first = parts[0];
		newPair.second = parts[1];
		_session.get_virtualButtonsPressed().add(newPair);
		
		randomButtons();
	}

	@Override
	public void authenticateButtonPressed() {
		_loginWindow.getFrame().setVisible(false);
		_loginWindow.getFrame().dispose();
		
		MenuPresenter menuPresenter = new MenuPresenter();
		menuPresenter.showWindow();
	}

	@Override
	public void confirmPasswordButtonPressed() {
		_loginWindow.passwordSucceded();
	}
	
}
